# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2020, The Idris Community
# This file is distributed under the same license as the Idris package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-29 14:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../guides/index.rst:5
#: 74cf60c976b14554812db7a251889f91
msgid "Tutorials on the Idris Language"
msgstr ""

#: ../guides/index.rst:7
#: cfae477e80b643d1b0ee54ff181be5d7
msgid "Tutorials submitted by community members."
msgstr ""

#: ../guides/index.rst:10
#: f36380e4db524f4cb0dbe45536813c7c
msgid "The documentation for Idris has been published under the Creative Commons CC0 License. As such to the extent possible under law, *The Idris Community* has waived all copyright and related or neighboring rights to Documentation for Idris."
msgstr ""

#: ../guides/index.rst:15
#: db0b380152884763b85e0581518cc343
msgid "More information concerning the CC0 can be found online at: https://creativecommons.org/publicdomain/zero/1.0/"
msgstr ""

#: ../guides/theorem-prover.rst:3
#: 74b6758e94b741e3972b4efd2593105f
msgid "The Interactive Theorem Prover"
msgstr ""

#: ../guides/theorem-prover.rst:5
#: 7ce09b93f69340fb8110150f80b5ea53
msgid "This short guide contributed by a community member illustrates how to prove associativity of addition on ``Nat`` using the interactive theorem prover."
msgstr ""

#: ../guides/theorem-prover.rst:7
#: 9237809609454954b8c8a9db803506fd
msgid "First we define a module ``Foo.idr``"
msgstr ""

#: ../guides/theorem-prover.rst:16
#: 8d529c52be5d490397b2c38d4a2cbc8a
msgid "We wish to perform induction on ``n``. First we load the file into the Idris ``REPL`` as follows::"
msgstr ""

#: ../guides/theorem-prover.rst:20
#: 2671be392f7d45a98d0fc769d5a8116d
msgid "We will be given the following prompt, in future releases the version string will differ::"
msgstr ""

#: ../guides/theorem-prover.rst:36
#: 29e659e95c4d4403964f871194b1d77f
msgid "Explore the Context"
msgstr ""

#: ../guides/theorem-prover.rst:38
#: 9ff5ad74613e4475bd2db83bbb9440e8
msgid "We start the interactive session by asking Idris to prove the hole ``rhs`` using the command ``:p rhs``. Idris by default will show us the initial context. This looks as follows::"
msgstr ""

#: ../guides/theorem-prover.rst:51
#: fe0b3657826d4dcd854fb4ba7068d620
msgid "Application of Intros"
msgstr ""

#: ../guides/theorem-prover.rst:53
#: 8ec8d0fb725245e4ba3521457880c0c5
msgid "We first apply the ``intros`` tactic::"
msgstr ""

#: ../guides/theorem-prover.rst:69
#: 5ead2aff0c9346109682a3dfc6633cb3
msgid "Induction on ``n``"
msgstr ""

#: ../guides/theorem-prover.rst:71
#: 14a4799f3bb746c48223ce12dc1a06b4
msgid "Then apply ``induction`` on to ``n``::"
msgstr ""

#: ../guides/theorem-prover.rst:89
#: ../guides/theorem-prover.rst:151
#: ee34ff04d2764a66ab774c6027452768
#: bf9d243bfe324672aa1d3a6356ed4640
msgid "Compute"
msgstr ""

#: ../guides/theorem-prover.rst:108
#: ../guides/theorem-prover.rst:197
#: 391f2edf7584420b939a7c64b1a518dd
#: 3b2af990bbb84d2e910f0e27314f1704
msgid "Trivial"
msgstr ""

#: ../guides/theorem-prover.rst:128
#: 5fb9cbed2d024566a55632313addf574
msgid "Intros"
msgstr ""

#: ../guides/theorem-prover.rst:174
#: 8f93a6dd475642aabc238a5bb97aca4d
msgid "Rewrite"
msgstr ""

#: ../guides/theorem-prover.rst:215
#: 6995ddf698f34966abc39fa3fe11cab0
msgid "Two goals were created: one for ``Z`` and one for ``S``. Here we have proven associativity, and assembled a tactic based proof script. This proof script can be added to ``Foo.idr``."
msgstr ""

#: ../guides/type-providers-ffi.rst:3
#: e052b717ae9f42edb06854d1f3dd0a8b
msgid "Type Providers in Idris"
msgstr ""

#: ../guides/type-providers-ffi.rst:5
#: 5bc876a5b58b4b479b3c9222f045decb
msgid "`Type providers in Idris <https://www.davidchristiansen.dk/pubs/dependent-type-providers.pdf>`__ are simple enough, but there are a few caveats to using them that it would be worthwhile to go through the basic steps. We also go over foreign functions, because these will often be used with type providers."
msgstr ""

#: ../guides/type-providers-ffi.rst:13
#: 8ddc4dac11b14dabaa4fa28bf293f17d
msgid "The use case"
msgstr ""

#: ../guides/type-providers-ffi.rst:15
#: 9e631b282af3403ea2200588c9ed88b2
msgid "First, let's talk about *why* we might want type providers. There are a number of reasons to use them and there are other examples available around the net, but in this tutorial we'll be using them to port C's ``struct stat`` to Idris."
msgstr ""

#: ../guides/type-providers-ffi.rst:20
#: d1b41026f83b4eb1bebf9692277a6a6c
msgid "Why do we need type providers? Well, Idris's FFI needs to know the types of the things it passes to and from C, but the fields of a ``struct stat`` are implementation-dependent types that cannot be relied upon. We don't just want to hard-code these types into our program... so we'll use a type provider to find them at compile time!"
msgstr ""

#: ../guides/type-providers-ffi.rst:27
#: 333ef0e0b7ec4989b8c86acfe611126b
msgid "A simple example"
msgstr ""

#: ../guides/type-providers-ffi.rst:29
#: d843a721ea8d44afb7521aa04dcff520
msgid "First, let's go over a basic usage of type providers, because foreign functions can be confusing but it's important to remember that providers themselves are simple."
msgstr ""

#: ../guides/type-providers-ffi.rst:33
#: e3b37f2fe43b436085d19ac0c931e130
msgid "A type provider is simply an IO action that returns a value of this type:"
msgstr ""

#: ../guides/type-providers-ffi.rst:40
#: 7f6af08cdc154ec4bbff4e41a7b0400f
msgid "Looks familiar? ``Provider`` is just ``Either a String``, given a slightly more descriptive name."
msgstr ""

#: ../guides/type-providers-ffi.rst:43
#: 0648296bae18457bb25d94a791b5c9f8
msgid "Remember though, type providers we use in our program must be IO actions. Let's write a simple one now:"
msgstr ""

#: ../guides/type-providers-ffi.rst:60
#: 5cf5a5aae77c441e86fbc928d43f7049
msgid "We assume that whoever's compiling the library knows the size of ``size_t``, so we'll just ask them! (Don't worry, we'll get it ourselves later.) Then, if their response can be converted to an integer, we present ``Provide sizeTSize`` as the result of our IO action; or if it can't, we signal a failure. (This will then become a compile-time error.)"
msgstr ""

#: ../guides/type-providers-ffi.rst:67
#: 576c4702a6664b9fac3f43d0af3483ad
msgid "Now we can use this IO action as a type provider:"
msgstr ""

#: ../guides/type-providers-ffi.rst:90
#: fde7b6ef37734a46901f3ab6bd37f664
msgid "Yay! We... asked the user something at compile time? That's not very good, actually. Our library is going to be difficult to compile! This is hardly a step up from having them edit in the size of ``size_t`` themselves!"
msgstr ""

#: ../guides/type-providers-ffi.rst:95
#: 26e987f8eb664df49f77ef04eed49c02
msgid "Don't worry, there's a better way."
msgstr ""

#: ../guides/type-providers-ffi.rst:98
#: 276b90aec88745e7955369292cdd8e0f
msgid "Foreign Functions"
msgstr ""

#: ../guides/type-providers-ffi.rst:100
#: 58723172d32646aa848a0f3b5eaaea43
msgid "It's actually pretty easy to write a C function that figures out the size of ``size_t``:"
msgstr ""

#: ../guides/type-providers-ffi.rst:107
#: 5dfae7428e714f7c854a33329614862f
msgid "(Why an int and not a ``size_t``? The FFI needs to know how to receive the return value of this function and translate it into an Idris value. If we knew how to do this for values of C type ``size_t``, we wouldn't need to write this function at all! If we really wanted to be safe from overflow, we could use an array of multiple integers, but the SIZE of ``size_t`` is never going to be a 65535 byte integer.)"
msgstr ""

#: ../guides/type-providers-ffi.rst:114
#: 30b23f6217b44ebe8ab77fc146dcf587
msgid "So now we can get the size of ``size_t`` as long as we're in C code. We'd like to be able to use this from Idris. Can we do this? It turns out we can."
msgstr ""

#: ../guides/type-providers-ffi.rst:119
#: f5cbf6b231db48058770998d275863de
msgid "``foreign``"
msgstr ""

#: ../guides/type-providers-ffi.rst:121
#: d0c2b9aeee274faab7430e752c30b641
msgid "With foreign, we can turn a C function into an IO action. It works like this:"
msgstr ""

#: ../guides/type-providers-ffi.rst:129
#: 576a1603eb6b41199dc4ba27e35871e4
msgid "Pretty simple. ``foreign`` takes a specification of what function it needs to call and that function's return type."
msgstr ""

#: ../guides/type-providers-ffi.rst:133
#: fecbaf41eb804b53b669f0c9693b4d1d
msgid "Running foreign functions"
msgstr ""

#: ../guides/type-providers-ffi.rst:135
#: f054156a28a5429bb3ff527b1544567b
msgid "This is all well and good for writing code that will typecheck. To actually run the code, we'll need to do just a bit more work. Exactly what we need to do depends on whether we want to interpret or compile our code."
msgstr ""

#: ../guides/type-providers-ffi.rst:141
#: c753b683ee874bdcb907d98e90945ea2
msgid "In the interpreter"
msgstr ""

#: ../guides/type-providers-ffi.rst:143
#: 48d89fe312f144a7b2b6cffb9f9b6177
msgid "If we want to call our foreign functions from interpreted code (such as the REPL or a type provider), we need to dynamically link a library containing the symbols we need. This is pretty easy to do with the ``%dynamic`` directive:"
msgstr ""

#: ../guides/type-providers-ffi.rst:152
#: 801f4d80162c45bdaab2f366880af82d
msgid "Note that the leading \"./\" is important: currently, the string you provide is interpreted as by ``dlopen()``, which on Unix does not search in the current directory by default. If you use the \"./\", the library will be searched for in the directory from which you run idris (*not* the location of the file you're running!). Of course, if you're using functions from an installed library rather than something you wrote yourself, the \"./\" is not necessary."
msgstr ""

#: ../guides/type-providers-ffi.rst:161
#: 438db371f6c242809af643e5972edd02
msgid "In an executable"
msgstr ""

#: ../guides/type-providers-ffi.rst:163
#: b7c116047e7046298c6cbf23b27a6e5c
msgid "If we want to run our code from an executable, we can statically link instead. We'll use the ``%include`` and ``%link`` directives:"
msgstr ""

#: ../guides/type-providers-ffi.rst:171
#: ce9387ac25814730b03d70a06b974c0a
msgid "Note the extra argument to the directive! We specify that we're linking a C header and library. Also, unlike ``%dynamic``, these directives search in the current directory by default. (That is, the directory from which we run idris.)"
msgstr ""

#: ../guides/type-providers-ffi.rst:177
#: 64c363284f644549acf900dc76998301
msgid "Putting it all together"
msgstr ""

#: ../guides/type-providers-ffi.rst:179
#: 585465b319cb4072b21584008c7d488d
msgid "So, at the beginning of this article I said we'd use type providers to port ``struct stat`` to Idris. The relevant part is just translating all the mysterious typedef'd C types into Idris types, and that's what we'll do here."
msgstr ""

#: ../guides/type-providers-ffi.rst:184
#: f5b8906636c24d3cad1fe3122645564b
msgid "First, let's write a C file containing functions that we'll bind to."
msgstr ""

#: ../guides/type-providers-ffi.rst:195
#: 58b1ea4c0e464a118aa7ce1016020735
msgid "Next, an Idris file to define our providers:"
msgstr ""

#: ../guides/type-providers-ffi.rst:234
#: 9e3521ee63d8452a85d6e8fe326f8b1d
msgid "Finally, we'll write one more idris file where we use the type providers:"
msgstr ""
