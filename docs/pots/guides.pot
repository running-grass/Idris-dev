# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2020, The Idris Community
# This file is distributed under the same license as the Idris package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-29 09:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../guides/index.rst:5
msgid "Tutorials on the Idris Language"
msgstr ""

#: ../guides/index.rst:7
msgid "Tutorials submitted by community members."
msgstr ""

#: ../guides/index.rst:10
msgid "The documentation for Idris has been published under the Creative Commons CC0 License. As such to the extent possible under law, *The Idris Community* has waived all copyright and related or neighboring rights to Documentation for Idris."
msgstr ""

#: ../guides/index.rst:15
msgid "More information concerning the CC0 can be found online at: https://creativecommons.org/publicdomain/zero/1.0/"
msgstr ""

#: ../guides/theorem-prover.rst:3
msgid "The Interactive Theorem Prover"
msgstr ""

#: ../guides/theorem-prover.rst:5
msgid "This short guide contributed by a community member illustrates how to prove associativity of addition on ``Nat`` using the interactive theorem prover."
msgstr ""

#: ../guides/theorem-prover.rst:7
msgid "First we define a module ``Foo.idr``"
msgstr ""

#: ../guides/theorem-prover.rst:16
msgid "We wish to perform induction on ``n``. First we load the file into the Idris ``REPL`` as follows::"
msgstr ""

#: ../guides/theorem-prover.rst:20
msgid "We will be given the following prompt, in future releases the version string will differ::"
msgstr ""

#: ../guides/theorem-prover.rst:36
msgid "Explore the Context"
msgstr ""

#: ../guides/theorem-prover.rst:38
msgid "We start the interactive session by asking Idris to prove the hole ``rhs`` using the command ``:p rhs``. Idris by default will show us the initial context. This looks as follows::"
msgstr ""

#: ../guides/theorem-prover.rst:51
msgid "Application of Intros"
msgstr ""

#: ../guides/theorem-prover.rst:53
msgid "We first apply the ``intros`` tactic::"
msgstr ""

#: ../guides/theorem-prover.rst:69
msgid "Induction on ``n``"
msgstr ""

#: ../guides/theorem-prover.rst:71
msgid "Then apply ``induction`` on to ``n``::"
msgstr ""

#: ../guides/theorem-prover.rst:89
#: ../guides/theorem-prover.rst:151
msgid "Compute"
msgstr ""

#: ../guides/theorem-prover.rst:108
#: ../guides/theorem-prover.rst:197
msgid "Trivial"
msgstr ""

#: ../guides/theorem-prover.rst:128
msgid "Intros"
msgstr ""

#: ../guides/theorem-prover.rst:174
msgid "Rewrite"
msgstr ""

#: ../guides/theorem-prover.rst:215
msgid "Two goals were created: one for ``Z`` and one for ``S``. Here we have proven associativity, and assembled a tactic based proof script. This proof script can be added to ``Foo.idr``."
msgstr ""

#: ../guides/type-providers-ffi.rst:3
msgid "Type Providers in Idris"
msgstr ""

#: ../guides/type-providers-ffi.rst:5
msgid "`Type providers in Idris <https://www.davidchristiansen.dk/pubs/dependent-type-providers.pdf>`__ are simple enough, but there are a few caveats to using them that it would be worthwhile to go through the basic steps. We also go over foreign functions, because these will often be used with type providers."
msgstr ""

#: ../guides/type-providers-ffi.rst:13
msgid "The use case"
msgstr ""

#: ../guides/type-providers-ffi.rst:15
msgid "First, let's talk about *why* we might want type providers. There are a number of reasons to use them and there are other examples available around the net, but in this tutorial we'll be using them to port C's ``struct stat`` to Idris."
msgstr ""

#: ../guides/type-providers-ffi.rst:20
msgid "Why do we need type providers? Well, Idris's FFI needs to know the types of the things it passes to and from C, but the fields of a ``struct stat`` are implementation-dependent types that cannot be relied upon. We don't just want to hard-code these types into our program... so we'll use a type provider to find them at compile time!"
msgstr ""

#: ../guides/type-providers-ffi.rst:27
msgid "A simple example"
msgstr ""

#: ../guides/type-providers-ffi.rst:29
msgid "First, let's go over a basic usage of type providers, because foreign functions can be confusing but it's important to remember that providers themselves are simple."
msgstr ""

#: ../guides/type-providers-ffi.rst:33
msgid "A type provider is simply an IO action that returns a value of this type:"
msgstr ""

#: ../guides/type-providers-ffi.rst:40
msgid "Looks familiar? ``Provider`` is just ``Either a String``, given a slightly more descriptive name."
msgstr ""

#: ../guides/type-providers-ffi.rst:43
msgid "Remember though, type providers we use in our program must be IO actions. Let's write a simple one now:"
msgstr ""

#: ../guides/type-providers-ffi.rst:60
msgid "We assume that whoever's compiling the library knows the size of ``size_t``, so we'll just ask them! (Don't worry, we'll get it ourselves later.) Then, if their response can be converted to an integer, we present ``Provide sizeTSize`` as the result of our IO action; or if it can't, we signal a failure. (This will then become a compile-time error.)"
msgstr ""

#: ../guides/type-providers-ffi.rst:67
msgid "Now we can use this IO action as a type provider:"
msgstr ""

#: ../guides/type-providers-ffi.rst:90
msgid "Yay! We... asked the user something at compile time? That's not very good, actually. Our library is going to be difficult to compile! This is hardly a step up from having them edit in the size of ``size_t`` themselves!"
msgstr ""

#: ../guides/type-providers-ffi.rst:95
msgid "Don't worry, there's a better way."
msgstr ""

#: ../guides/type-providers-ffi.rst:98
msgid "Foreign Functions"
msgstr ""

#: ../guides/type-providers-ffi.rst:100
msgid "It's actually pretty easy to write a C function that figures out the size of ``size_t``:"
msgstr ""

#: ../guides/type-providers-ffi.rst:107
msgid "(Why an int and not a ``size_t``? The FFI needs to know how to receive the return value of this function and translate it into an Idris value. If we knew how to do this for values of C type ``size_t``, we wouldn't need to write this function at all! If we really wanted to be safe from overflow, we could use an array of multiple integers, but the SIZE of ``size_t`` is never going to be a 65535 byte integer.)"
msgstr ""

#: ../guides/type-providers-ffi.rst:114
msgid "So now we can get the size of ``size_t`` as long as we're in C code. We'd like to be able to use this from Idris. Can we do this? It turns out we can."
msgstr ""

#: ../guides/type-providers-ffi.rst:119
msgid "``foreign``"
msgstr ""

#: ../guides/type-providers-ffi.rst:121
msgid "With foreign, we can turn a C function into an IO action. It works like this:"
msgstr ""

#: ../guides/type-providers-ffi.rst:129
msgid "Pretty simple. ``foreign`` takes a specification of what function it needs to call and that function's return type."
msgstr ""

#: ../guides/type-providers-ffi.rst:133
msgid "Running foreign functions"
msgstr ""

#: ../guides/type-providers-ffi.rst:135
msgid "This is all well and good for writing code that will typecheck. To actually run the code, we'll need to do just a bit more work. Exactly what we need to do depends on whether we want to interpret or compile our code."
msgstr ""

#: ../guides/type-providers-ffi.rst:141
msgid "In the interpreter"
msgstr ""

#: ../guides/type-providers-ffi.rst:143
msgid "If we want to call our foreign functions from interpreted code (such as the REPL or a type provider), we need to dynamically link a library containing the symbols we need. This is pretty easy to do with the ``%dynamic`` directive:"
msgstr ""

#: ../guides/type-providers-ffi.rst:152
msgid "Note that the leading \"./\" is important: currently, the string you provide is interpreted as by ``dlopen()``, which on Unix does not search in the current directory by default. If you use the \"./\", the library will be searched for in the directory from which you run idris (*not* the location of the file you're running!). Of course, if you're using functions from an installed library rather than something you wrote yourself, the \"./\" is not necessary."
msgstr ""

#: ../guides/type-providers-ffi.rst:161
msgid "In an executable"
msgstr ""

#: ../guides/type-providers-ffi.rst:163
msgid "If we want to run our code from an executable, we can statically link instead. We'll use the ``%include`` and ``%link`` directives:"
msgstr ""

#: ../guides/type-providers-ffi.rst:171
msgid "Note the extra argument to the directive! We specify that we're linking a C header and library. Also, unlike ``%dynamic``, these directives search in the current directory by default. (That is, the directory from which we run idris.)"
msgstr ""

#: ../guides/type-providers-ffi.rst:177
msgid "Putting it all together"
msgstr ""

#: ../guides/type-providers-ffi.rst:179
msgid "So, at the beginning of this article I said we'd use type providers to port ``struct stat`` to Idris. The relevant part is just translating all the mysterious typedef'd C types into Idris types, and that's what we'll do here."
msgstr ""

#: ../guides/type-providers-ffi.rst:184
msgid "First, let's write a C file containing functions that we'll bind to."
msgstr ""

#: ../guides/type-providers-ffi.rst:195
msgid "Next, an Idris file to define our providers:"
msgstr ""

#: ../guides/type-providers-ffi.rst:234
msgid "Finally, we'll write one more idris file where we use the type providers:"
msgstr ""
